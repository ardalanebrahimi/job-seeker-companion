generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserFile {
  id        String   @id @default(uuid())
  userId    String
  kind      String
  mimeType  String
  filename  String
  uri       String
  createdAt DateTime @default(now())

  @@map("user_files")
}

model ResumeFact {
  id        String   @id @default(uuid())
  userId    String
  kind      String
  dataJson  Json
  createdAt DateTime @default(now())

  @@index([userId, kind])
  @@map("resume_facts")
}

model JobPosting {
  id           String        @id @default(uuid())
  source       String
  url          String?
  company      String?
  title        String?
  location     String?
  jdText       String
  jdStructJson Json?
  rawHtmlUri   String?
  embedding    String?       // Base64 encoded vector for similarity search
  createdAt    DateTime      @default(now())
  applications Application[]

  @@map("job_postings")
}

model Application {
  id          String            @id @default(uuid())
  userId      String
  jobId       String
  status      ApplicationStatus @default(Found)
  appliedAt   DateTime?
  nextEventAt DateTime?
  notesMd     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  docs        ApplicationDoc[]
  job         JobPosting        @relation(fields: [jobId], references: [id])
  decisions   DecisionLog[]
  notes       Note[]
  reminders   Reminder[]
  history     ApplicationHistory[]

  @@map("applications")
}

model ApplicationDoc {
  id            String         @id @default(uuid())
  applicationId String
  kind          DocumentKind
  format        DocumentFormat
  blobUri       String
  checksum      String?
  variantLabel  String?
  language      String?
  createdAt     DateTime       @default(now())
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_docs")
}

model DecisionLog {
  id                  String      @id @default(uuid())
  applicationId       String
  personaLabel        String?
  realityIndex        Int?
  signalsJson         Json?
  keywordsEmphasized  Json?
  styleRationale      String?
  switchesJson        Json?
  provenanceLinksJson Json?
  createdAt           DateTime    @default(now())
  application         Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("decision_logs")
}

model Note {
  id            String      @id @default(uuid())
  applicationId String
  text          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("notes")
}

// V2 Models
model Reminder {
  id            String      @id @default(uuid())
  applicationId String
  dueAt         DateTime
  kind          ReminderKind
  title         String?
  description   String?
  completed     Boolean     @default(false)
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model ApplicationHistory {
  id            String      @id @default(uuid())
  applicationId String
  timestamp     DateTime    @default(now())
  type          HistoryType
  description   String
  metadata      Json?
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_history")
}

model CoachingHint {
  id            String         @id @default(uuid())
  applicationId String
  category      HintCategory
  title         String
  description   String
  priority      HintPriority
  dismissed     Boolean        @default(false)
  dismissedAt   DateTime?
  createdAt     DateTime       @default(now())

  @@map("coaching_hints")
}

enum ReminderKind {
  followup
  interview
  task
}

enum HistoryType {
  status_change
  note_added
  note_updated
  note_deleted
  reminder_set
  reminder_completed
  document_generated
}

enum HintCategory {
  next_step
  follow_up
  improvement
  preparation
}

enum HintPriority {
  high
  medium
  low
}

enum ApplicationStatus {
  Found
  Applied
  Interview
  Offer
  Rejected
}

enum DocumentKind {
  cv
  cover
  brochure
  prep
}

enum DocumentFormat {
  md
  docx
  pdf
}
